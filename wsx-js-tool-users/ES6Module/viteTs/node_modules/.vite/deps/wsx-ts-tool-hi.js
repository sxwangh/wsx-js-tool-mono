import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/.pnpm/wsx-ts-tool-hi@1.0.1/node_modules/wsx-ts-tool-hi/lib/wsx-ts-tool.umd.js
var require_wsx_ts_tool_umd = __commonJS({
  "node_modules/.pnpm/wsx-ts-tool-hi@1.0.1/node_modules/wsx-ts-tool-hi/lib/wsx-ts-tool.umd.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.Dry = factory());
    })(exports, function() {
      "use strict";
      function getUrlParamByName(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = null;
        if (window.location.href.split("?")[1]) {
          r = window.location.href.split("?")[1].match(reg);
        }
        if (r != null) {
          return decodeURIComponent(r[2]);
        }
        return "";
      }
      function trim(str) {
        return str.replace(/(^\s*)|(\s*$)/g, "");
      }
      function getToday(withTime) {
        if (withTime === void 0) {
          withTime = false;
        }
        var today = new Date();
        if (!withTime) {
          today.setHours(0);
          today.setMinutes(0);
          today.setSeconds(0);
        }
        today.setMilliseconds(0);
        return today;
      }
      function getDaysAgo(day, withTime) {
        if (withTime === void 0) {
          withTime = false;
        }
        var daysAgo = new Date();
        daysAgo.setDate(daysAgo.getDate() - day + 1);
        if (!withTime) {
          daysAgo.setHours(0);
          daysAgo.setMinutes(0);
          daysAgo.setSeconds(0);
        }
        daysAgo.setMilliseconds(0);
        return daysAgo;
      }
      function getFormatDate(date) {
        var newDate = new Date(date);
        var Y = "".concat(newDate.getFullYear(), "-");
        var M = "".concat(newDate.getMonth() + 1 < 10 ? "0".concat(newDate.getMonth() + 1) : newDate.getMonth() + 1, "-");
        var D = "".concat(newDate.getDate() < 10 ? "0".concat(newDate.getDate()) : newDate.getDate(), " ");
        return "".concat(Y).concat(M).concat(D);
      }
      var wsxJsTool = {
        getUrlParamByName,
        trim,
        getToday,
        getDaysAgo,
        getFormatDate
      };
      return wsxJsTool;
    });
    if (typeof window !== "undefined") {
      window._Dry_VERSION_ = "1.0.0";
    }
  }
});
export default require_wsx_ts_tool_umd();
//# sourceMappingURL=wsx-ts-tool-hi.js.map
